"""A web3.py Contract class for the {{contract_name}} contract."""

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

from __future__ import annotations
from typing import cast

from eth_typing import ChecksumAddress
from web3.types import ABI
from web3.contract.contract import Contract, ContractFunction, ContractFunctions
from web3.exceptions import FallbackNotFound
{% if function_data.signature_datas|length > 1%}
from multimethod import multimethod
{% endif %}


{# loop over all functions and create types for each #}
{% for name, function_data in functions.items() %}
class {{contract_name}}{{function_data.capitalized_name}}ContractFunction(ContractFunction):
    """ContractFunction for the {{function_data.name}} method."""
    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ
    {% for signature_data in function_data.signature_datas %}
    {% if function_data.signature_datas|length > 1%}
    @multimethod
    {% endif %}
    def __call__(self, {{signature_data.input_names_and_types|join(', ')}}) -> "{{contract_name}}{{signature_data.capitalized_name}}ContractFunction":
        super().__call__({{signature_data.input_names|join(', ')}})
        return self
    {% endfor %}
{% endfor %}


class {{contract_name}}ContractFunctions(ContractFunctions):
    """ContractFunctions for the {{contract_name}} contract."""
{% for function in functions %}
    {{function.name}}: {{contract_name}}{{function.capitalized_name}}ContractFunction
{% endfor %}

{{contract_name | lower}}_abi: ABI = cast(ABI, {{abi}})

class {{contract_name}}Contract(Contract):
    """A web3.py Contract class for the {{contract_name}} contract."""

    abi: ABI = {{contract_name | lower}}_abi

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        try:
            # Initialize parent Contract class
            super().__init__(address=address)

        except FallbackNotFound:
            print("Fallback function not found. Continuing...")

    # TODO: add events
    # events: ERC20ContractEvents

    functions: {{contract_name}}ContractFunctions
